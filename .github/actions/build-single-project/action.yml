name: 'Build single playground project'
description: 'Builds one playground project'
inputs:
  project:  # 
    description: 'Project name'
    required: true
  project-root: # 
    description: "root folder of the project, defaults to name"
    required: false
  gradle-cache-password:
    description: "password for gradle cache"
  gradle-enterprise-access-key:
    description: "access key for gradle enterprise"
runs:
  using: "composite"
  steps:
    - name: "Setup JDK 8 for tools.jar"
      id: setup-java8
      uses: actions/setup-java@v1
      with:
        java-version: "8"
    - name: "set tools jar path"
      id: setup-tools-jar
      run: |
        set -x
        TOOLS_JAR=$JAVA_HOME/lib/tools.jar
        echo "::set-output name=toolsJar::$TOOLS_JAR"
    - name: "Setup JDK 11"
      id: setup-java
      uses: actions/setup-java@v1
      with:
        java-version: "11"

    - name: "Set environment variables"
      shell: bash
      run: |
        set -x
        echo "DIST_DIR=$HOME/dist" >> $GITHUB_ENV
    # gradle action loads the dependencies cache only on the first run based on arguments.
    # to control it, we explicitly invoke it once which makes it load the dependencies cache with the parameters
    # we control
    - name: "warm up gradle"
      id: warm-up-gradle-cache
      uses: gradle/gradle-command-action@v1
      env:
        JAVA_HOME: ${{ steps.setup-java.outputs.path }}
        JAVA_TOOLS_JAR: ${{ steps.setup-tools-jar.outputs.toolsJar }}
      with:
        arguments: tasks -PandroidXUnusedParameter=${{ env.project-root }} # add project name to cache key
        build-root-directory: ${{ env.project-root }}
        configuration-cache-enabled: false
        dependencies-cache-enabled: true
        dependencies-cache-key: |
          **/libs.versions.toml
        dependencies-cache-exact: false
        gradle-executable: ${{ env.project-root }}/gradlew
        wrapper-directory: ${{ env.project-root }}/gradle/wrapper
        distributions-cache-enabled: true
    - name: "./gradlew buildOnServer zipTestConfigsWithApks test"
      uses: gradle/gradle-command-action@v1
      env:
        JAVA_HOME: ${{ steps.setup-java.outputs.path }}
        JAVA_TOOLS_JAR: ${{ steps.setup-tools-jar.outputs.toolsJar }}
      with:
        arguments: buildOnServer zipTestConfigsWithApks test ${{ needs.setup.outputs.gradlew_flags }}
        build-root-directory: ${{ env.project-root }}
        configuration-cache-enabled: false
        dependencies-cache-enabled: false
        distributions-cache-enabled: false
        gradle-executable: ${{ env.project-root }}/gradlew
        wrapper-directory: ${{ env.project-root }}/gradle/wrapper

    - name: "Upload build artifacts"
      continue-on-error: true
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: artifacts_${{ env.artifact-id }}
        path: ~/dist
    - name: "Upload daemon logs"
      continue-on-error: true
      if: failure()
      uses: actions/upload-artifact@v2
      with:
        name: gradle-daemon-logs_${{ env.artifact-id }}
        path: ~/.gradle/daemon

